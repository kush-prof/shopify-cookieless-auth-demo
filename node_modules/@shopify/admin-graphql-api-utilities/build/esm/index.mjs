function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var GID_TYPE_REGEXP = /^gid:\/\/[\w-]+\/([\w-]+)\//;
var GID_REGEXP = /\/(\w[\w-]*)(?:\?(.*))*$/;
export function parseGidType(gid) {
  var matches = GID_TYPE_REGEXP.exec(gid);

  if (matches && matches[1] !== undefined) {
    return matches[1];
  }

  throw new Error("Invalid gid: ".concat(gid));
}
export function parseGid(gid) {
  // prepends forward slash to help identify invalid id
  var id = "/".concat(gid);
  var matches = GID_REGEXP.exec(id);

  if (matches && matches[1] !== undefined) {
    return matches[1];
  }

  throw new Error("Invalid gid: ".concat(gid));
}
export function parseGidWithParams(gid) {
  // appends forward slash to help identify invalid id
  var id = "/".concat(gid);
  var matches = GID_REGEXP.exec(id);

  if (matches && matches[1] !== undefined) {
    var params = matches[2] === undefined ? {} : fromEntries(new URLSearchParams(matches[2]).entries());
    return {
      id: matches[1],
      params: params
    };
  }

  throw new Error("Invalid gid: ".concat(gid));
}
export function composeGidFactory(namescape) {
  return function composeGid(key, id) {
    var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var gid = "gid://".concat(namescape, "/").concat(key, "/").concat(id);
    var paramKeys = Object.keys(params);

    if (paramKeys.length === 0) {
      return gid;
    }

    var paramString = new URLSearchParams(params).toString();
    return "".concat(gid, "?").concat(paramString);
  };
}
export var composeGid = composeGidFactory('shopify');
export function nodesFromEdges(edges) {
  return edges.map(function (_ref) {
    var node = _ref.node;
    return node;
  });
}
export function keyFromEdges(edges, key) {
  return edges.map(function (_ref2) {
    var node = _ref2.node;
    return node[key];
  });
} // Once we update to Node 12, we can drop this helper to use `Object.fromEntries` instead.

function fromEntries(entries) {
  var obj = {};

  var _iterator = _createForOfIteratorHelper(entries),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = _slicedToArray(_step.value, 2),
          key = _step$value[0],
          val = _step$value[1];

      obj[key] = val;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return obj;
}