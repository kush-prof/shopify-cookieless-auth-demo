const GID_TYPE_REGEXP = /^gid:\/\/[\w-]+\/([\w-]+)\//;
const GID_REGEXP = /\/(\w[\w-]*)(?:\?(.*))*$/;
export function parseGidType(gid) {
  const matches = GID_TYPE_REGEXP.exec(gid);

  if (matches && matches[1] !== undefined) {
    return matches[1];
  }

  throw new Error(`Invalid gid: ${gid}`);
}
export function parseGid(gid) {
  // prepends forward slash to help identify invalid id
  const id = `/${gid}`;
  const matches = GID_REGEXP.exec(id);

  if (matches && matches[1] !== undefined) {
    return matches[1];
  }

  throw new Error(`Invalid gid: ${gid}`);
}
export function parseGidWithParams(gid) {
  // appends forward slash to help identify invalid id
  const id = `/${gid}`;
  const matches = GID_REGEXP.exec(id);

  if (matches && matches[1] !== undefined) {
    const params = matches[2] === undefined ? {} : fromEntries(new URLSearchParams(matches[2]).entries());
    return {
      id: matches[1],
      params
    };
  }

  throw new Error(`Invalid gid: ${gid}`);
}
export function composeGidFactory(namescape) {
  return function composeGid(key, id, params = {}) {
    const gid = `gid://${namescape}/${key}/${id}`;
    const paramKeys = Object.keys(params);

    if (paramKeys.length === 0) {
      return gid;
    }

    const paramString = new URLSearchParams(params).toString();
    return `${gid}?${paramString}`;
  };
}
export const composeGid = composeGidFactory('shopify');
export function nodesFromEdges(edges) {
  return edges.map(({
    node
  }) => node);
}
export function keyFromEdges(edges, key) {
  return edges.map(({
    node
  }) => node[key]);
} // Once we update to Node 12, we can drop this helper to use `Object.fromEntries` instead.

function fromEntries(entries) {
  const obj = {};

  for (const [key, val] of entries) {
    obj[key] = val;
  }

  return obj;
}