"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.keyFromEdges = exports.nodesFromEdges = exports.composeGid = exports.composeGidFactory = exports.parseGidWithParams = exports.parseGid = exports.parseGidType = void 0;
var tslib_1 = require("tslib");
var GID_TYPE_REGEXP = /^gid:\/\/[\w-]+\/([\w-]+)\//;
var GID_REGEXP = /\/(\w[\w-]*)(?:\?(.*))*$/;
function parseGidType(gid) {
    var matches = GID_TYPE_REGEXP.exec(gid);
    if (matches && matches[1] !== undefined) {
        return matches[1];
    }
    throw new Error("Invalid gid: " + gid);
}
exports.parseGidType = parseGidType;
function parseGid(gid) {
    // prepends forward slash to help identify invalid id
    var id = "/" + gid;
    var matches = GID_REGEXP.exec(id);
    if (matches && matches[1] !== undefined) {
        return matches[1];
    }
    throw new Error("Invalid gid: " + gid);
}
exports.parseGid = parseGid;
function parseGidWithParams(gid) {
    // appends forward slash to help identify invalid id
    var id = "/" + gid;
    var matches = GID_REGEXP.exec(id);
    if (matches && matches[1] !== undefined) {
        var params = matches[2] === undefined
            ? {}
            : fromEntries(new URLSearchParams(matches[2]).entries());
        return {
            id: matches[1],
            params: params,
        };
    }
    throw new Error("Invalid gid: " + gid);
}
exports.parseGidWithParams = parseGidWithParams;
function composeGidFactory(namescape) {
    return function composeGid(key, id, params) {
        if (params === void 0) { params = {}; }
        var gid = "gid://" + namescape + "/" + key + "/" + id;
        var paramKeys = Object.keys(params);
        if (paramKeys.length === 0) {
            return gid;
        }
        var paramString = new URLSearchParams(params).toString();
        return gid + "?" + paramString;
    };
}
exports.composeGidFactory = composeGidFactory;
exports.composeGid = composeGidFactory('shopify');
function nodesFromEdges(edges) {
    return edges.map(function (_a) {
        var node = _a.node;
        return node;
    });
}
exports.nodesFromEdges = nodesFromEdges;
function keyFromEdges(edges, key) {
    return edges.map(function (_a) {
        var node = _a.node;
        return node[key];
    });
}
exports.keyFromEdges = keyFromEdges;
// Once we update to Node 12, we can drop this helper to use `Object.fromEntries` instead.
function fromEntries(entries) {
    var e_1, _a;
    var obj = {};
    try {
        for (var entries_1 = tslib_1.__values(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {
            var _b = tslib_1.__read(entries_1_1.value, 2), key = _b[0], val = _b[1];
            obj[key] = val;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (entries_1_1 && !entries_1_1.done && (_a = entries_1.return)) _a.call(entries_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return obj;
}
