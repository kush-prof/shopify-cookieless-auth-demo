"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDateTimeParts = getDateTimeParts;

var _decorators = require("@shopify/decorators");

var _utilities = require("./utilities");

var _sanitiseDateString = require("./sanitise-date-string");

var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

var TWO_DIGIT_REGEX = /(\d{2})/;

function getDateTimeParts(date, timeZone) {
  return {
    year: function year() {
      return DateTimeParts.getYear(date, timeZone);
    },
    month: function month() {
      return DateTimeParts.getMonth(date, timeZone);
    },
    day: function day() {
      return DateTimeParts.getDay(date, timeZone);
    },
    weekday: function weekday() {
      return DateTimeParts.getWeekday(date, timeZone);
    },
    hour: function hour() {
      return DateTimeParts.getHour(date, timeZone);
    },
    minute: function minute() {
      return DateTimeParts.getMinute(date, timeZone);
    },
    second: function second() {
      return DateTimeParts.getSecond(date, timeZone);
    }
  };
}

function dateTimeCacheKey(unit) {
  return function (date, timeZone) {
    return "".concat(unit, "-").concat(date.toString(), "-").concat(timeZone);
  };
}

var Weekday;

(function (Weekday) {
  Weekday["Monday"] = "Monday";
  Weekday["Tuesday"] = "Tuesday";
  Weekday["Wednesday"] = "Wednesday";
  Weekday["Thursday"] = "Thursday";
  Weekday["Friday"] = "Friday";
  Weekday["Saturday"] = "Saturday";
  Weekday["Sunday"] = "Sunday";
})(Weekday || (Weekday = {}));

var weekdays = {
  Monday: 0,
  Tuesday: 1,
  Wednesday: 2,
  Thursday: 3,
  Friday: 4,
  Saturday: 5,
  Sunday: 6
};

function isWeekday(weekday) {
  return Object.keys(weekdays).some(function (key) {
    return key === weekday;
  });
}

function assertNever(message) {
  throw new Error(message);
}

function getWeekdayValue(weekday) {
  if (!isWeekday(weekday)) {
    return assertNever("Unexpected weekday: ".concat(weekday));
  }

  return weekdays[weekday];
} // eslint-disable-next-line @typescript-eslint/no-extraneous-class


var DateTimeParts = (_dec = (0, _decorators.memoize)(dateTimeCacheKey('year')), _dec2 = (0, _decorators.memoize)(dateTimeCacheKey('month')), _dec3 = (0, _decorators.memoize)(dateTimeCacheKey('day')), _dec4 = (0, _decorators.memoize)(dateTimeCacheKey('weekday')), _dec5 = (0, _decorators.memoize)(dateTimeCacheKey('hour')), _dec6 = (0, _decorators.memoize)(dateTimeCacheKey('minute')), _dec7 = (0, _decorators.memoize)(dateTimeCacheKey('second')), _dec8 = (0, _decorators.memoize)(dateTimeCacheKey('timePartsFallback')), (_class = /*#__PURE__*/function () {
  function DateTimeParts() {
    _classCallCheck(this, DateTimeParts);
  }

  _createClass(DateTimeParts, null, [{
    key: "getYear",
    value: function getYear(date, timeZone) {
      if (isNaN(date.valueOf())) {
        throw new Error("Unable to parse date: ".concat(date, " for timezone: ").concat(timeZone));
      }

      var yearString = (0, _utilities.formatDate)(date, 'en', {
        timeZone: timeZone,
        year: 'numeric'
      });
      var sanitisedYearString = (0, _sanitiseDateString.sanitiseDateString)(yearString);
      var year = parseInt(sanitisedYearString, 10);

      if (isNaN(year)) {
        throw new Error("Unable to parse year: '".concat(yearString, "'"));
      }

      return year;
    }
  }, {
    key: "getMonth",
    value: function getMonth(date, timeZone) {
      var monthString = (0, _utilities.formatDate)(date, 'en', {
        timeZone: timeZone,
        month: 'numeric'
      });
      var sanitisedMonthString = (0, _sanitiseDateString.sanitiseDateString)(monthString);
      var month = parseInt(sanitisedMonthString, 10);

      if (isNaN(month)) {
        throw new Error("Unable to parse month: '".concat(monthString, "'"));
      }

      return month;
    }
  }, {
    key: "getDay",
    value: function getDay(date, timeZone) {
      var dayString = (0, _utilities.formatDate)(date, 'en', {
        timeZone: timeZone,
        day: 'numeric'
      });
      var sanitisedDayString = (0, _sanitiseDateString.sanitiseDateString)(dayString);
      var day = parseInt(sanitisedDayString, 10);

      if (isNaN(day)) {
        throw new Error("Unable to parse day: '".concat(dayString, "'"));
      }

      return day;
    }
  }, {
    key: "getWeekday",
    value: function getWeekday(date, timeZone) {
      var weekdayString = (0, _utilities.formatDate)(date, 'en', {
        timeZone: timeZone,
        weekday: 'long'
      });
      var sanitisedWeekdayString = (0, _sanitiseDateString.sanitiseDateString)(weekdayString);
      return getWeekdayValue(sanitisedWeekdayString);
    }
  }, {
    key: "getHour",
    value: function getHour(date, timeZone) {
      var hourString = (0, _utilities.formatDate)(date, 'en', {
        timeZone: timeZone,
        hour12: false,
        hour: 'numeric'
      });
      var hour = parseInt(hourString, 10);

      if (isNaN(hour)) {
        hour = DateTimeParts.getTimePartsFallback(date, timeZone).hour;
      }

      return hour;
    }
  }, {
    key: "getMinute",
    value: function getMinute(date, timeZone) {
      var minuteString = (0, _utilities.formatDate)(date, 'en', {
        timeZone: timeZone,
        minute: 'numeric'
      });
      var minute = parseInt(minuteString, 10);

      if (isNaN(minute)) {
        minute = DateTimeParts.getTimePartsFallback(date, timeZone).minute;
      }

      return minute;
    }
  }, {
    key: "getSecond",
    value: function getSecond(date, timeZone) {
      var secondString = (0, _utilities.formatDate)(date, 'en', {
        timeZone: timeZone,
        second: 'numeric'
      });
      var second = parseInt(secondString, 10);

      if (isNaN(second)) {
        second = DateTimeParts.getTimePartsFallback(date, timeZone).second;
      }

      return second;
    }
  }, {
    key: "getTimePartsFallback",
    value: function getTimePartsFallback(date, timeZone) {
      var timeString = (0, _utilities.formatDate)(date, 'en', {
        timeZone: timeZone,
        hour12: false,
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      }); // In Microsoft Edge, Intl.DateTimeFormat returns invisible characters around the individual numbers

      var _timeString$split = timeString.split(':'),
          _timeString$split2 = _slicedToArray(_timeString$split, 3),
          dirtyHour = _timeString$split2[0],
          dirtyMinute = _timeString$split2[1],
          dirtySecond = _timeString$split2[2];

      var rawHour = new RegExp(TWO_DIGIT_REGEX).exec(dirtyHour);
      var rawMinute = new RegExp(TWO_DIGIT_REGEX).exec(dirtyMinute);
      var rawSecond = new RegExp(TWO_DIGIT_REGEX).exec(dirtySecond);

      if (rawHour != null && rawMinute != null && rawSecond != null) {
        var hour = parseInt(rawHour[1], 10);
        var minute = parseInt(rawMinute[1], 10);
        var second = parseInt(rawSecond[1], 10);
        return {
          hour: hour,
          minute: minute,
          second: second
        };
      }

      throw new Error("Unable to parse timeString: '".concat(timeString, "'"));
    }
  }]);

  return DateTimeParts;
}(), (_applyDecoratedDescriptor(_class, "getYear", [_dec], Object.getOwnPropertyDescriptor(_class, "getYear"), _class), _applyDecoratedDescriptor(_class, "getMonth", [_dec2], Object.getOwnPropertyDescriptor(_class, "getMonth"), _class), _applyDecoratedDescriptor(_class, "getDay", [_dec3], Object.getOwnPropertyDescriptor(_class, "getDay"), _class), _applyDecoratedDescriptor(_class, "getWeekday", [_dec4], Object.getOwnPropertyDescriptor(_class, "getWeekday"), _class), _applyDecoratedDescriptor(_class, "getHour", [_dec5], Object.getOwnPropertyDescriptor(_class, "getHour"), _class), _applyDecoratedDescriptor(_class, "getMinute", [_dec6], Object.getOwnPropertyDescriptor(_class, "getMinute"), _class), _applyDecoratedDescriptor(_class, "getSecond", [_dec7], Object.getOwnPropertyDescriptor(_class, "getSecond"), _class), _applyDecoratedDescriptor(_class, "getTimePartsFallback", [_dec8], Object.getOwnPropertyDescriptor(_class, "getTimePartsFallback"), _class)), _class));