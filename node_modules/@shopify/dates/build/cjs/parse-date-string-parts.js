"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseDateStringParts = parseDateStringParts;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * Allowed date string formats
 * yyyy-mm-dd
 * yyyy-mm-ddThh:mm:ss.fff
 * yyyy-mm-ddThh:mm:ss.fff+hh:mm
 * yyyy-mm-ddThh:mm:ss.fff-hh:mm
 * yyyy-mm-ddThh:mm:ss.fffZ
 */
var DATE_TIME_PARTS_REGEX = /^(\d{4})-(\d{2})-(\d{2})(?:T(\d{2}):(\d{2}):(\d{2})(?:\.(\d{1,3}))?(?:(Z|(?:(\+|-)(\d{2}):(\d{2}))))?)?$/;

function parseDateStringParts(dateString) {
  var dateTimeParts = new RegExp(DATE_TIME_PARTS_REGEX).exec(dateString);

  if (dateTimeParts == null) {
    return null;
  } // slice the first regex part (the full match) off


  var _Array$from$slice = Array.from(dateTimeParts).slice(1),
      _Array$from$slice2 = _slicedToArray(_Array$from$slice, 11),
      year = _Array$from$slice2[0],
      month = _Array$from$slice2[1],
      day = _Array$from$slice2[2],
      hour = _Array$from$slice2[3],
      minute = _Array$from$slice2[4],
      second = _Array$from$slice2[5],
      millisecond = _Array$from$slice2[6],
      timeZoneOffset = _Array$from$slice2[7],
      sign = _Array$from$slice2[8],
      timeZoneHour = _Array$from$slice2[9],
      timeZoneMinute = _Array$from$slice2[10];

  return {
    year: year,
    month: month,
    day: day,
    hour: hour,
    minute: minute,
    second: second,
    millisecond: millisecond,
    timeZoneOffset: timeZoneOffset,
    sign: sign,
    timeZoneHour: timeZoneHour,
    timeZoneMinute: timeZoneMinute
  };
}