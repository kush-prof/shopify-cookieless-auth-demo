"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.memoizedGetDateTimeFormat = memoizedGetDateTimeFormat;
exports.formatDate = formatDate;
exports.dateTimeFormatCacheKey = dateTimeFormatCacheKey;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var intl = new Map();

function memoizedGetDateTimeFormat(locales, options) {
  var key = dateTimeFormatCacheKey(locales, options);

  if (intl.has(key)) {
    return intl.get(key);
  }

  var i = new Intl.DateTimeFormat(locales, options);
  intl.set(key, i);
  return i;
}

var browserFeatureDetectionDate = Intl.DateTimeFormat('en', {
  hour: 'numeric'
});
var resolvedOptions = typeof browserFeatureDetectionDate.resolvedOptions === 'undefined' ? undefined : browserFeatureDetectionDate.resolvedOptions();

function formatDate(date, locales) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var hourCycleRequired = resolvedOptions != null && options.hour12 === false && resolvedOptions.hourCycle != null;

  if (hourCycleRequired) {
    options.hour12 = undefined;
    options.hourCycle = 'h23';
  } // Etc/GMT+12 is not supported in most browsers and there is no equivalent fallback


  if (options.timeZone != null && options.timeZone === 'Etc/GMT+12') {
    var adjustedDate = new Date(date.valueOf() - 12 * 60 * 60 * 1000);
    return memoizedGetDateTimeFormat(locales, _objectSpread(_objectSpread({}, options), {}, {
      timeZone: 'UTC'
    })).format(adjustedDate);
  }

  return memoizedGetDateTimeFormat(locales, options).format(date);
}

function dateTimeFormatCacheKey(locales) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var localeKey = Array.isArray(locales) ? locales.sort().join('-') : locales;
  return "".concat(localeKey, "-").concat(JSON.stringify(options));
}