"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = memoize;
exports.MAX_MAP_ENTRIES = void 0;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var MAX_MAP_ENTRIES = 50;
exports.MAX_MAP_ENTRIES = MAX_MAP_ENTRIES;

function memoize(method, resolver) {
  var weakMapCache = new WeakMap();
  var mapCache = new Map();
  var mapKeys = [];
  return function memoized() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (typeof window === 'undefined') {
      return method.apply(this, args);
    }

    var useWeakMap = args.length === 1 && _typeof(args[0]) === 'object' && !resolver;
    var key;

    if (useWeakMap) {
      key = args[0];
    } else if (resolver && resolver instanceof Function) {
      key = resolver.apply(void 0, args);
    } else {
      key = args[0];
    }

    var cache = useWeakMap ? weakMapCache : mapCache;

    if (cache.has(key)) {
      return cache.get(key);
    }

    var result = method.apply(this, args);

    if (useWeakMap) {
      weakMapCache.set(key, result);
    } else {
      mapCache.set(key, result);
      mapKeys.push(key);

      if (mapCache.size > MAX_MAP_ENTRIES) {
        var oldestKey = mapKeys[0];
        mapCache["delete"](oldestKey);
        mapKeys.shift();
      }
    }

    return result;
  };
}