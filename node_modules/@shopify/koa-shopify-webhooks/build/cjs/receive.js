"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.receiveWebhook = receiveWebhook;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _crypto = require("crypto");

var _safeCompare = _interopRequireDefault(require("safe-compare"));

var _koaBodyparser = _interopRequireDefault(require("koa-bodyparser"));

var _koaMount = _interopRequireDefault(require("koa-mount"));

var _koaCompose = _interopRequireDefault(require("koa-compose"));

var _network = require("@shopify/network");

var _types = require("./types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function receiveWebhook(_ref) {
  var secret = _ref.secret,
      path = _ref.path,
      _ref$onReceived = _ref.onReceived,
      onReceived = _ref$onReceived === void 0 ? noop : _ref$onReceived;

  function receiveWebhookMiddleware(_x, _x2) {
    return _receiveWebhookMiddleware.apply(this, arguments);
  }

  function _receiveWebhookMiddleware() {
    _receiveWebhookMiddleware = _asyncToGenerator( /*#__PURE__*/_regenerator["default"].mark(function _callee(ctx, next) {
      var hmac, topic, domain, rawBody, generatedHash, graphqlTopic;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              hmac = ctx.get(_types.WebhookHeader.Hmac);
              topic = ctx.get(_types.WebhookHeader.Topic);
              domain = ctx.get(_types.WebhookHeader.Domain);
              rawBody = ctx.request.rawBody;
              generatedHash = (0, _crypto.createHmac)('sha256', secret).update(rawBody, 'utf8').digest('base64');
              graphqlTopic = topic.toUpperCase().replace(/\//g, '_');

              if (!(0, _safeCompare["default"])(generatedHash, hmac)) {
                _context.next = 15;
                break;
              }

              ctx.res.statusCode = _network.StatusCode.Accepted;
              ctx.state.webhook = {
                topic: graphqlTopic,
                domain: domain,
                payload: JSON.parse(rawBody)
              };
              _context.next = 11;
              return onReceived(ctx);

            case 11:
              _context.next = 13;
              return next();

            case 13:
              _context.next = 16;
              break;

            case 15:
              ctx.res.statusCode = _network.StatusCode.Forbidden;

            case 16:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _receiveWebhookMiddleware.apply(this, arguments);
  }

  var middleware = (0, _koaCompose["default"])([(0, _koaBodyparser["default"])(), receiveWebhookMiddleware]);
  return path ? (0, _koaMount["default"])(path, middleware) : middleware;
}

function noop() {}